cache(amatrix)
cacheSolve(amatrix)
c
split(c)
split(c, 2)
split(c, 1)
split(c, 3)
split(c, 3000)
amatrix
m <- amatrix$get()
m
solve(m)
m <- matrix(1:8, nrow = 8, ncol = 8)
solve(m)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
s$`9`
d <- s$`9`
d
class(d)
lapply(s, function(x) colMeans(x[,2]))
lapply(s, function(x) colMeans(x[,c("Ozone")]))
lapply(s, function(s) colMeans(s[,c("Ozone")]))
lapply(s, function() colMeans(s[,c("Ozone")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R")]))
lapply(s, function(x) colMeans(x[, ]))
lapply(s, function(x) colMeans(x[,]))
lapply(s, function(x) colMeans(x[,], na.rm = TRUE))
data(cars)
car
cars
data()
data(Formaldehyde)
Formaldehyde
data(attitude)
str(attitude)
x <- c(2.1, 4.2, 3.3, 5.4)
x[c(3,1)]
x[order(x, decreasing = TRUE)]
x <- c(2.1, 4.2, 3.3, 5.4)
x[c(2.1, 2.9)]
x[c(TRUE, TRUE, FALSE, FALSE)]
x
x[c(-1, 2)]
x[-c(1, 2)]
x[1,2]
x[1:2]
x[-1:2]
x[]
y <- setNames(x, letters[1:4])
y
str(y)
y["c"]
y["c", "d"]
y[c("c", "d")]
install.packages("rmy")
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(httr)
oauth_endpoints("github")
#
myapp <- oauth_app("github", "394bc113cec10f172f19", "b30b900081d5809d6e5adf7861554a1456191c21")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
# curl -u Access Token:x-oauth-basic "https://api.github.com/users/jtleek/repos"
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
oauth_endpoints("github")
#
myapp <- oauth_app("github", "394bc113cec10f172f19", "b30b900081d5809d6e5adf7861554a1456191c21")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
# curl -u Access Token:x-oauth-basic "https://api.github.com/users/jtleek/repos"
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", key="7eeb5753524e12ead876", secret="ef33989a51346e93a46ceecc743e6e302fdfe953")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
a <- content(req)
a[4]
library(httpuv)
install.packages("httpuv")
library("httpuv", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", key="7eeb5753524e12ead876", secret="ef33989a51346e93a46ceecc743e6e302fdfe953")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
a <- content(req)
a[4]
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "394bc113cec10f172f19", "b30b900081d5809d6e5adf7861554a1456191c21")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
a <- content(req)
content(req)
a[4]
content(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
str(raw_result)
str(a)
names(a)
a
library(jsonlite)
names(a)
head(a)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
jsonData$name
jsonData$owner
jsoned <- fromJson(a)
jsoned <- fromJSON(a)
a
jsonData
View(jsonData)
install.packages("rjs")
content(req)
json1 <- jsonlite::fromJSON(toJSON(a))
json1[which(json1$name == "datasharing"),]$created_at
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "394bc113cec10f172f19", "b30b900081d5809d6e5adf7861554a1456191c21")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
a <- content(req)
json1 <- jsonlite::fromJSON(toJSON(a))
json1[which(json1$name == "datasharing"),]$created_at
library(httr)
library(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "394bc113cec10f172f19", "b30b900081d5809d6e5adf7861554a1456191c21")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
a <- content(req)
json1 <- jsonlite::fromJSON(toJSON(a))
json1[which(json1$name == "datasharing"),]$created_at
set.seed(3435)
set.seed(13435)
X <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
View(X)
X <- X[sample(1:5), ]
View(X)
sample(1:5)
X[sample(1:5), ]
X[sample(11:15), ]
X[sample(1:5), ]
X
X[1:5, ]
X[]
X$var2[[1]]
X$var2[[1],[2]]
X$var2[[1:2]]
X$var2[[1]]
X$var2[[2]]
X$var2[[1]:[2]]
X$var2[c(1,3)] = NA
X
X[X$var1 <= 3 $ X$var3> 11, ]
X[X$var1 <= 3 $ X$var3 > 11, ]
X[(X$var1 <= 3 $ X$var3 > 11), ]
X[X$var1 <= 3 $ X$var3 > 11), ]
X[(X$var1 <= 3 & X$var3 > 11),]
X[X$var1 <= 3 & X$var3 > 11,]
X[X$var1 <= 3 & X$var3 > 11), ]
X[X$var1 <= 3 & X$var3 > 11, ]
X[which(X$var1 <= 3 & X$var3 > 11), ]
X[which(X$var2 <= 8), ]
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 5, y + 5, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
View(dataFrame)
dist(dataFrame)
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
distxy
str(distxy)
unclass(distxy)
hClustering <- hclust(distxy)
hClustering
class(hClustering)
plot(hClustering)
install.packages("myplclust")
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*!  Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
View(dataMatrix)
View(dataFrame)
as.matrix(dataFrame)[sample(1:12), ]
as.matrix(dataFrame)
dataFrame
heatmap(dataMatrix)
heatmap(dataFrame
)
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
kmeansObj$cluster
kmeansObj$centers
plot(kmeanObj)
plot(kmeansObj)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
image()
?image
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
hh <- hclust(dist(dataMatrix))
hh
hh
str(hh)
dataMatrixOrdered <- dataMatrix[hh$order, ]
plot(hclust)
plot(hh)
data Matrix
dataMatrix
data MatrixOrdered
dataMatrixOrdered
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
View(dataMatrixOrdered)
svd1 <- svd(scale(dataMatrixOrdered))
str(svd1)
svd$d
svd[1]
svd1[1]
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[, 1], 40:1, , xlab = "Row", ylab = "First left singular vector",
pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
par(mfrow = c(1, 2))
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained",
pch = 19)
svd1$d
svd1$d^2/sum(svd1$d^2
)
svd1 <- svd(scale(dataMatrixOrdered))
pca1 <- prcomp(dataMatrixOrdered, scale = TRUE)
plot(pca1$rotation[, 1], svd1$v[, 1], pch = 19, xlab = "Principal Component 1",
ylab = "Right Singular Vector 1")
abline(c(0, 1))
scale(dataMatrixOrdered)
svd1 <- svd(scale(dataMatrixOrdered))
pca1 <- prcomp(dataMatrixOrdered, scale = TRUE)
plot(pca1$rotation[, 1], svd1$v[, 1], pch = 19, xlab = "Principal Component 1",
ylab = "Right Singular Vector 1")
abline(c(0, 1))
constantMatrix <- dataMatrixOrdered*0
View(constantMatrix)
for(i in 1:dim(dataMatrixOrdered)[1]){constantMatrix[i,] <- rep(c(0,1),each=5)}
View(constantMatrix)
svd1 <- svd(constantMatrix)
par(mfrow=c(1,3))
image(t(constantMatrix)[,nrow(constantMatrix):1])
plot(svd1$d,xlab="Column",ylab="Singular value",pch=19)
plot(svd1$d^2/sum(svd1$d^2),xlab="Column",ylab="Prop. of variance explained",pch=19)
sample(1:100, size = 40, replace = FALSE)
?image
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, 1:nrow(dataMatrix)])
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
View(dataMatrix)
?t
a <- matrix(1:30, 5, 6)
a
ta <- t(a)
ta
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, 1:nrow(dataMatrix)])
image(1:10, 1:40, dataMatrix[, 1:nrow(dataMatrix)])
image(1:40,1:10, dataMatrix[1:nrow(dataMatrix), ])
library(nycflights13)
library(dplyr)
library(ggplot2)
by_tailnum <- group_by(flights, tailnum)
delay <- summarise(by_tailnum,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
delay <- filter(delay, count > 20, dist < 2000)
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area()
destinations <- group_by(flights, dest)
summarise(destinations,
planes = n_distinct(tailnum),
flights = n()
)
(per_day   <- summarise(daily, flights = n()))
daily <- group_by(flights, year, month, day)
(per_day   <- summarise(daily, flights = n()))
(per_day   <- summarise(daily, flights = n()))
(per_month <- summarise(per_day, flights = sum(flights)))
(per_year  <- summarise(per_month, flights = sum(flights)))
View(destinations)
summarise(destinations,
planes = n_distinct(tailnum),
flights = n()
)
daily
summarize(daily, flights = n())
summarize(daily, flights = n()) >%>
summarize(daily, flights = n()) >%>
print
install.packages("kernlab")
library("kernlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = .5)
?rbinom
summary(trainIndicator)
table(trainIndicator)
View(spam)
colnames(spam)
trainIndicator %in% colnames(spam)
colnames(spam)
"trainIndicator" %in% colnames(spam)
"type" %in% colnames(spam)
which("type" %in% colnames(spam))
colnames(spam) %in% "type"
c <- colnames(spam) %in% "type"
colnames(spam)[c]
trainIndicator == 1
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
rm(c)
View(trainSpam)
View(spam)
table(trainSpam$type)
plot(trainsSpam$capitalAve, trainSpam$type)
plot(trainsSpam$capitalAve ~ trainSpam$type)
plot(trainSpam$capitalAve, trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
colnames(trainSpam)
hCluster <- hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
str(trainSpam)
plot(log10(trainSpam[, 1:4] + 1))
plot(log10(trainSpam[, 1] + 1))
plot(log10(trainSpam[, 1:4] + 1))
str(trainSpam)
trainSpam$numType = as.numeric(trainSpam$type) - 1
str(trainSpam)
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
library("googleVis", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
plot(gvisMotionChart(Fruits, idvar=’Fruit’, timevar=’Year’))
plot(gvisMotionChart(Fruits, idvar=’Fruit’, timevar=’Year’))
data(fruits)
library(usingR)
library("UsingR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
data(fruits)
data(Fruits)
plot(gvisMotionChart(Fruits, idvar=’Fruit’, timevar=’Year’))
suppressPackageStartupMessages(library(googleVis))
plot(gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400)))
plot(gvisMotionChart(Fruits, idvar=’Fruit’, timevar=’Year’))
plot(gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 500, height = 350)))
plot(gvisMotionChart(mtcars, options = list(width = 500, height = 350)))
head(mtcars)
plot(gvisMotionChart(mtcars, "hp", "cyl", options = list(width = 500, height = 350)))
gvisMotionChart(Fruits, idvar="Fruit", timevar="Year")
plot(gvisMotionChart(Fruits, idvar="Fruit", timevar="Year"))
View(Fruits)
plot(gvisMotionChart(Fruits, idvar="Fruit", timevar="Date"))
mtcars
plot(gvisMotionChart(mtcars, idvar="gear", timevar="mpg"))
setwd("~/Documents/GITHUB/Data Science Spclztn/developing data products/project")
runApp()
library(shiny)
runApp()
deployApp()
library(shinyApps)
library(shineyapps)
library(shinyapps)
deployApp()
